import React, { useEffect, useState } from 'react';
import './App.css';
import { Button, FormControl, InputLabel, Input } from '@material-ui/core'
import Message from './Message';

import FlipMove from 'react-flip-move'
import SendIcon from '@material-ui/icons/Send'
import IconButton from '@material-ui/core/IconButton'
import io from 'socket.io-client'
import axios from './axios';



const socket = io.connect("http://localhost:3001");

function App()
{
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [username, setUsername] = useState('');
  const [onlineUsers, setOnlineUsers] = useState({});

  const sync = async () =>
  {
    console.log("axios");
    await axios.get('/retrieve/conversation').then(res =>
    {
      setMessages(res.data);
    });
  };

  useEffect(() =>
  {
    sync();
  }, []);

  useEffect(() =>
  {
    const name = prompt('Please enter your name');
    setUsername(name);
    socket.emit('join', { username: name });
  }, []);

  useEffect(() =>
  {
    socket.on('receive_message', (data) =>
    {
      console.log("Received", data);
      setMessages(prevMessages => [...prevMessages, data]);
    });

    socket.on('user_online', (data) =>
    {
      console.log("user online", data.username)
      setOnlineUsers(prevUsers => ({ ...prevUsers, [data.username]: true }));
      console.log("Online users", onlineUsers)
    });

    socket.on('user_offline', (data) =>
    {
      setOnlineUsers(prevUsers => ({ ...prevUsers, [data.username]: false }));
    });

    socket.on('message_edited', (data) =>
    {
      setMessages(prevMessages =>
        prevMessages.map(msg => msg._id === data._id ? { ...msg, message: data.message, edited: true } : msg)
      );
    });

    socket.on('message_deleted', (data) =>
    {
      setMessages(prevMessages => prevMessages.filter(msg => msg._id !== data.id));
    });

    socket.on('message_delivered', (data) =>
    {
      setMessages(prevMessages =>
        prevMessages.map(msg => msg._id === data._id ? { ...msg, delivered: true } : msg)
      );
    });

  }, []);

  const sendMessage = async (e) =>
  {
    e.preventDefault();

    const message = {
      username: username,
      message: input,
      timestamp: Date.now(),
      delivered: false, 
      edited: false,
      online: true 
    };

    socket.emit('send_message', message);

    const response = await axios.post('/save/message', message);

    // socket.emit('message_delivered', { id: response.data._id });

    setInput('');

  };

  const editMessage = async (id, newMessage) =>
  {
    socket.emit('edit_message', { id, message: newMessage, username });
    await axios.put(`/edit/message/${ id }`, { message: newMessage, username });
    
  };

  const deleteMessage = async (id) =>
  {
    socket.emit('delete_message', { id, username });
    await axios.delete(`/delete/message/${ id }`, { data: { username } });
  };

  return (
    <div className="App">
      <img src="https://static-00.iconduck.com/assets.00/chat-icon-2048x2048-i7er18st.png" style={{ width: "100px" }} alt="messenger logo" />
      <h2>Welcome {username}</h2>

      <form className='app__form' >
        <FormControl className='app__formControl' >
          <Input className='app__input' placeholder='Enter a message...' value={input} onChange={(e) => setInput(e.target.value)} />
          <IconButton className='app__iconButton' variant='text' color='primary' disabled={!input} onClick={sendMessage} type="submit" >
            <SendIcon />
          </IconButton>
        </FormControl>
      </form>

      <FlipMove>
        {
          messages.map(message => (
            <Message
              key={message._id}
              message={message}
              username={username}
              onlineStatus={onlineUsers[message.username]}
              onEdit={editMessage}
              onDelete={deleteMessage}
            />
          ))
        }
      </FlipMove>
    </div>
  );
}

export default App;
